// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fishus/go-advanced-gophermart/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// UserStorager is an autogenerated mock type for the UserStorager type
type UserStorager struct {
	mock.Mock
}

type UserStorager_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStorager) EXPECT() *UserStorager_Expecter {
	return &UserStorager_Expecter{mock: &_m.Mock}
}

// UserAdd provides a mock function with given fields: _a0, _a1
func (_m *UserStorager) UserAdd(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserAdd")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorager_UserAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserAdd'
type UserStorager_UserAdd_Call struct {
	*mock.Call
}

// UserAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserStorager_Expecter) UserAdd(_a0 interface{}, _a1 interface{}) *UserStorager_UserAdd_Call {
	return &UserStorager_UserAdd_Call{Call: _e.mock.On("UserAdd", _a0, _a1)}
}

func (_c *UserStorager_UserAdd_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserStorager_UserAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserStorager_UserAdd_Call) Return(_a0 models.UserID, _a1 error) *UserStorager_UserAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStorager_UserAdd_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *UserStorager_UserAdd_Call {
	_c.Call.Return(run)
	return _c
}

// UserByID provides a mock function with given fields: _a0, _a1
func (_m *UserStorager) UserByID(_a0 context.Context, _a1 models.UserID) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorager_UserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByID'
type UserStorager_UserByID_Call struct {
	*mock.Call
}

// UserByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.UserID
func (_e *UserStorager_Expecter) UserByID(_a0 interface{}, _a1 interface{}) *UserStorager_UserByID_Call {
	return &UserStorager_UserByID_Call{Call: _e.mock.On("UserByID", _a0, _a1)}
}

func (_c *UserStorager_UserByID_Call) Run(run func(_a0 context.Context, _a1 models.UserID)) *UserStorager_UserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *UserStorager_UserByID_Call) Return(_a0 models.User, _a1 error) *UserStorager_UserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStorager_UserByID_Call) RunAndReturn(run func(context.Context, models.UserID) (models.User, error)) *UserStorager_UserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UserLogin provides a mock function with given fields: _a0, _a1
func (_m *UserStorager) UserLogin(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserLogin")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorager_UserLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLogin'
type UserStorager_UserLogin_Call struct {
	*mock.Call
}

// UserLogin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserStorager_Expecter) UserLogin(_a0 interface{}, _a1 interface{}) *UserStorager_UserLogin_Call {
	return &UserStorager_UserLogin_Call{Call: _e.mock.On("UserLogin", _a0, _a1)}
}

func (_c *UserStorager_UserLogin_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserStorager_UserLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserStorager_UserLogin_Call) Return(_a0 models.UserID, _a1 error) *UserStorager_UserLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStorager_UserLogin_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *UserStorager_UserLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserStorager creates a new instance of UserStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorager {
	mock := &UserStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
