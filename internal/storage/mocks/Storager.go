// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	models "github.com/fishus/go-advanced-gophermart/pkg/models"

	storage "github.com/fishus/go-advanced-gophermart/internal/storage"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

type Storager_Expecter struct {
	mock *mock.Mock
}

func (_m *Storager) EXPECT() *Storager_Expecter {
	return &Storager_Expecter{mock: &_m.Mock}
}

// LoyaltyAddWithdraw provides a mock function with given fields: ctx, userID, orderNum, withdraw
func (_m *Storager) LoyaltyAddWithdraw(ctx context.Context, userID models.UserID, orderNum string, withdraw decimal.Decimal) error {
	ret := _m.Called(ctx, userID, orderNum, withdraw)

	if len(ret) == 0 {
		panic("no return value specified for LoyaltyAddWithdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, string, decimal.Decimal) error); ok {
		r0 = rf(ctx, userID, orderNum, withdraw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storager_LoyaltyAddWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoyaltyAddWithdraw'
type Storager_LoyaltyAddWithdraw_Call struct {
	*mock.Call
}

// LoyaltyAddWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.UserID
//   - orderNum string
//   - withdraw decimal.Decimal
func (_e *Storager_Expecter) LoyaltyAddWithdraw(ctx interface{}, userID interface{}, orderNum interface{}, withdraw interface{}) *Storager_LoyaltyAddWithdraw_Call {
	return &Storager_LoyaltyAddWithdraw_Call{Call: _e.mock.On("LoyaltyAddWithdraw", ctx, userID, orderNum, withdraw)}
}

func (_c *Storager_LoyaltyAddWithdraw_Call) Run(run func(ctx context.Context, userID models.UserID, orderNum string, withdraw decimal.Decimal)) *Storager_LoyaltyAddWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID), args[2].(string), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *Storager_LoyaltyAddWithdraw_Call) Return(_a0 error) *Storager_LoyaltyAddWithdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_LoyaltyAddWithdraw_Call) RunAndReturn(run func(context.Context, models.UserID, string, decimal.Decimal) error) *Storager_LoyaltyAddWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// LoyaltyBalanceByUser provides a mock function with given fields: _a0, _a1
func (_m *Storager) LoyaltyBalanceByUser(_a0 context.Context, _a1 models.UserID) (models.LoyaltyBalance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoyaltyBalanceByUser")
	}

	var r0 models.LoyaltyBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.LoyaltyBalance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.LoyaltyBalance); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.LoyaltyBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_LoyaltyBalanceByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoyaltyBalanceByUser'
type Storager_LoyaltyBalanceByUser_Call struct {
	*mock.Call
}

// LoyaltyBalanceByUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.UserID
func (_e *Storager_Expecter) LoyaltyBalanceByUser(_a0 interface{}, _a1 interface{}) *Storager_LoyaltyBalanceByUser_Call {
	return &Storager_LoyaltyBalanceByUser_Call{Call: _e.mock.On("LoyaltyBalanceByUser", _a0, _a1)}
}

func (_c *Storager_LoyaltyBalanceByUser_Call) Run(run func(_a0 context.Context, _a1 models.UserID)) *Storager_LoyaltyBalanceByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Storager_LoyaltyBalanceByUser_Call) Return(_a0 models.LoyaltyBalance, _a1 error) *Storager_LoyaltyBalanceByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_LoyaltyBalanceByUser_Call) RunAndReturn(run func(context.Context, models.UserID) (models.LoyaltyBalance, error)) *Storager_LoyaltyBalanceByUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoyaltyHistoryByUser provides a mock function with given fields: _a0, _a1
func (_m *Storager) LoyaltyHistoryByUser(_a0 context.Context, _a1 models.UserID) ([]models.LoyaltyHistory, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoyaltyHistoryByUser")
	}

	var r0 []models.LoyaltyHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) ([]models.LoyaltyHistory, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) []models.LoyaltyHistory); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.LoyaltyHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_LoyaltyHistoryByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoyaltyHistoryByUser'
type Storager_LoyaltyHistoryByUser_Call struct {
	*mock.Call
}

// LoyaltyHistoryByUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.UserID
func (_e *Storager_Expecter) LoyaltyHistoryByUser(_a0 interface{}, _a1 interface{}) *Storager_LoyaltyHistoryByUser_Call {
	return &Storager_LoyaltyHistoryByUser_Call{Call: _e.mock.On("LoyaltyHistoryByUser", _a0, _a1)}
}

func (_c *Storager_LoyaltyHistoryByUser_Call) Run(run func(_a0 context.Context, _a1 models.UserID)) *Storager_LoyaltyHistoryByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Storager_LoyaltyHistoryByUser_Call) Return(_a0 []models.LoyaltyHistory, _a1 error) *Storager_LoyaltyHistoryByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_LoyaltyHistoryByUser_Call) RunAndReturn(run func(context.Context, models.UserID) ([]models.LoyaltyHistory, error)) *Storager_LoyaltyHistoryByUser_Call {
	_c.Call.Return(run)
	return _c
}

// OrderAdd provides a mock function with given fields: _a0, _a1
func (_m *Storager) OrderAdd(_a0 context.Context, _a1 models.Order) (models.OrderID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrderAdd")
	}

	var r0 models.OrderID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (models.OrderID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) models.OrderID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.OrderID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_OrderAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderAdd'
type Storager_OrderAdd_Call struct {
	*mock.Call
}

// OrderAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.Order
func (_e *Storager_Expecter) OrderAdd(_a0 interface{}, _a1 interface{}) *Storager_OrderAdd_Call {
	return &Storager_OrderAdd_Call{Call: _e.mock.On("OrderAdd", _a0, _a1)}
}

func (_c *Storager_OrderAdd_Call) Run(run func(_a0 context.Context, _a1 models.Order)) *Storager_OrderAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *Storager_OrderAdd_Call) Return(_a0 models.OrderID, _a1 error) *Storager_OrderAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_OrderAdd_Call) RunAndReturn(run func(context.Context, models.Order) (models.OrderID, error)) *Storager_OrderAdd_Call {
	_c.Call.Return(run)
	return _c
}

// OrderAddAccrual provides a mock function with given fields: ctx, orderID, accrual
func (_m *Storager) OrderAddAccrual(ctx context.Context, orderID models.OrderID, accrual decimal.Decimal) error {
	ret := _m.Called(ctx, orderID, accrual)

	if len(ret) == 0 {
		panic("no return value specified for OrderAddAccrual")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderID, decimal.Decimal) error); ok {
		r0 = rf(ctx, orderID, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storager_OrderAddAccrual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderAddAccrual'
type Storager_OrderAddAccrual_Call struct {
	*mock.Call
}

// OrderAddAccrual is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID models.OrderID
//   - accrual decimal.Decimal
func (_e *Storager_Expecter) OrderAddAccrual(ctx interface{}, orderID interface{}, accrual interface{}) *Storager_OrderAddAccrual_Call {
	return &Storager_OrderAddAccrual_Call{Call: _e.mock.On("OrderAddAccrual", ctx, orderID, accrual)}
}

func (_c *Storager_OrderAddAccrual_Call) Run(run func(ctx context.Context, orderID models.OrderID, accrual decimal.Decimal)) *Storager_OrderAddAccrual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.OrderID), args[2].(decimal.Decimal))
	})
	return _c
}

func (_c *Storager_OrderAddAccrual_Call) Return(_a0 error) *Storager_OrderAddAccrual_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_OrderAddAccrual_Call) RunAndReturn(run func(context.Context, models.OrderID, decimal.Decimal) error) *Storager_OrderAddAccrual_Call {
	_c.Call.Return(run)
	return _c
}

// OrderByFilter provides a mock function with given fields: _a0, _a1
func (_m *Storager) OrderByFilter(_a0 context.Context, _a1 ...storage.OrderFilter) (models.Order, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrderByFilter")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...storage.OrderFilter) (models.Order, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...storage.OrderFilter) models.Order); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...storage.OrderFilter) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_OrderByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderByFilter'
type Storager_OrderByFilter_Call struct {
	*mock.Call
}

// OrderByFilter is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...storage.OrderFilter
func (_e *Storager_Expecter) OrderByFilter(_a0 interface{}, _a1 ...interface{}) *Storager_OrderByFilter_Call {
	return &Storager_OrderByFilter_Call{Call: _e.mock.On("OrderByFilter",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *Storager_OrderByFilter_Call) Run(run func(_a0 context.Context, _a1 ...storage.OrderFilter)) *Storager_OrderByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.OrderFilter, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(storage.OrderFilter)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Storager_OrderByFilter_Call) Return(_a0 models.Order, _a1 error) *Storager_OrderByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_OrderByFilter_Call) RunAndReturn(run func(context.Context, ...storage.OrderFilter) (models.Order, error)) *Storager_OrderByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// OrderByID provides a mock function with given fields: _a0, _a1
func (_m *Storager) OrderByID(_a0 context.Context, _a1 models.OrderID) (models.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrderByID")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderID) (models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderID) models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.OrderID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_OrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderByID'
type Storager_OrderByID_Call struct {
	*mock.Call
}

// OrderByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.OrderID
func (_e *Storager_Expecter) OrderByID(_a0 interface{}, _a1 interface{}) *Storager_OrderByID_Call {
	return &Storager_OrderByID_Call{Call: _e.mock.On("OrderByID", _a0, _a1)}
}

func (_c *Storager_OrderByID_Call) Run(run func(_a0 context.Context, _a1 models.OrderID)) *Storager_OrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.OrderID))
	})
	return _c
}

func (_c *Storager_OrderByID_Call) Return(_a0 models.Order, _a1 error) *Storager_OrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_OrderByID_Call) RunAndReturn(run func(context.Context, models.OrderID) (models.Order, error)) *Storager_OrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// OrderUpdateStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storager) OrderUpdateStatus(_a0 context.Context, _a1 models.OrderID, _a2 models.OrderStatus) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for OrderUpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrderID, models.OrderStatus) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storager_OrderUpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderUpdateStatus'
type Storager_OrderUpdateStatus_Call struct {
	*mock.Call
}

// OrderUpdateStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.OrderID
//   - _a2 models.OrderStatus
func (_e *Storager_Expecter) OrderUpdateStatus(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Storager_OrderUpdateStatus_Call {
	return &Storager_OrderUpdateStatus_Call{Call: _e.mock.On("OrderUpdateStatus", _a0, _a1, _a2)}
}

func (_c *Storager_OrderUpdateStatus_Call) Run(run func(_a0 context.Context, _a1 models.OrderID, _a2 models.OrderStatus)) *Storager_OrderUpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.OrderID), args[2].(models.OrderStatus))
	})
	return _c
}

func (_c *Storager_OrderUpdateStatus_Call) Return(_a0 error) *Storager_OrderUpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_OrderUpdateStatus_Call) RunAndReturn(run func(context.Context, models.OrderID, models.OrderStatus) error) *Storager_OrderUpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// OrdersByFilter provides a mock function with given fields: ctx, limit, filters
func (_m *Storager) OrdersByFilter(ctx context.Context, limit int, filters ...storage.OrderFilter) ([]models.Order, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrdersByFilter")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...storage.OrderFilter) ([]models.Order, error)); ok {
		return rf(ctx, limit, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...storage.OrderFilter) []models.Order); ok {
		r0 = rf(ctx, limit, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...storage.OrderFilter) error); ok {
		r1 = rf(ctx, limit, filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_OrdersByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrdersByFilter'
type Storager_OrdersByFilter_Call struct {
	*mock.Call
}

// OrdersByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - filters ...storage.OrderFilter
func (_e *Storager_Expecter) OrdersByFilter(ctx interface{}, limit interface{}, filters ...interface{}) *Storager_OrdersByFilter_Call {
	return &Storager_OrdersByFilter_Call{Call: _e.mock.On("OrdersByFilter",
		append([]interface{}{ctx, limit}, filters...)...)}
}

func (_c *Storager_OrdersByFilter_Call) Run(run func(ctx context.Context, limit int, filters ...storage.OrderFilter)) *Storager_OrdersByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.OrderFilter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(storage.OrderFilter)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *Storager_OrdersByFilter_Call) Return(_a0 []models.Order, _a1 error) *Storager_OrdersByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_OrdersByFilter_Call) RunAndReturn(run func(context.Context, int, ...storage.OrderFilter) ([]models.Order, error)) *Storager_OrdersByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// UserAdd provides a mock function with given fields: _a0, _a1
func (_m *Storager) UserAdd(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserAdd")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_UserAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserAdd'
type Storager_UserAdd_Call struct {
	*mock.Call
}

// UserAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *Storager_Expecter) UserAdd(_a0 interface{}, _a1 interface{}) *Storager_UserAdd_Call {
	return &Storager_UserAdd_Call{Call: _e.mock.On("UserAdd", _a0, _a1)}
}

func (_c *Storager_UserAdd_Call) Run(run func(_a0 context.Context, _a1 models.User)) *Storager_UserAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Storager_UserAdd_Call) Return(_a0 models.UserID, _a1 error) *Storager_UserAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_UserAdd_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *Storager_UserAdd_Call {
	_c.Call.Return(run)
	return _c
}

// UserByID provides a mock function with given fields: _a0, _a1
func (_m *Storager) UserByID(_a0 context.Context, _a1 models.UserID) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_UserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByID'
type Storager_UserByID_Call struct {
	*mock.Call
}

// UserByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.UserID
func (_e *Storager_Expecter) UserByID(_a0 interface{}, _a1 interface{}) *Storager_UserByID_Call {
	return &Storager_UserByID_Call{Call: _e.mock.On("UserByID", _a0, _a1)}
}

func (_c *Storager_UserByID_Call) Run(run func(_a0 context.Context, _a1 models.UserID)) *Storager_UserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Storager_UserByID_Call) Return(_a0 models.User, _a1 error) *Storager_UserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_UserByID_Call) RunAndReturn(run func(context.Context, models.UserID) (models.User, error)) *Storager_UserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UserLogin provides a mock function with given fields: _a0, _a1
func (_m *Storager) UserLogin(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UserLogin")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storager_UserLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLogin'
type Storager_UserLogin_Call struct {
	*mock.Call
}

// UserLogin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *Storager_Expecter) UserLogin(_a0 interface{}, _a1 interface{}) *Storager_UserLogin_Call {
	return &Storager_UserLogin_Call{Call: _e.mock.On("UserLogin", _a0, _a1)}
}

func (_c *Storager_UserLogin_Call) Run(run func(_a0 context.Context, _a1 models.User)) *Storager_UserLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Storager_UserLogin_Call) Return(_a0 models.UserID, _a1 error) *Storager_UserLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storager_UserLogin_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *Storager_UserLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
