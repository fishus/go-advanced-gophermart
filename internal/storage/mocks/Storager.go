// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	storage "github.com/fishus/go-advanced-gophermart/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storager is an autogenerated mock type for the Storager type
type Storager struct {
	mock.Mock
}

type Storager_Expecter struct {
	mock *mock.Mock
}

func (_m *Storager) EXPECT() *Storager_Expecter {
	return &Storager_Expecter{mock: &_m.Mock}
}

// Loyalty provides a mock function with given fields:
func (_m *Storager) Loyalty() storage.Loyaltier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Loyalty")
	}

	var r0 storage.Loyaltier
	if rf, ok := ret.Get(0).(func() storage.Loyaltier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Loyaltier)
		}
	}

	return r0
}

// Storager_Loyalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Loyalty'
type Storager_Loyalty_Call struct {
	*mock.Call
}

// Loyalty is a helper method to define mock.On call
func (_e *Storager_Expecter) Loyalty() *Storager_Loyalty_Call {
	return &Storager_Loyalty_Call{Call: _e.mock.On("Loyalty")}
}

func (_c *Storager_Loyalty_Call) Run(run func()) *Storager_Loyalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storager_Loyalty_Call) Return(_a0 storage.Loyaltier) *Storager_Loyalty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_Loyalty_Call) RunAndReturn(run func() storage.Loyaltier) *Storager_Loyalty_Call {
	_c.Call.Return(run)
	return _c
}

// Order provides a mock function with given fields:
func (_m *Storager) Order() storage.Orderer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 storage.Orderer
	if rf, ok := ret.Get(0).(func() storage.Orderer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Orderer)
		}
	}

	return r0
}

// Storager_Order_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Order'
type Storager_Order_Call struct {
	*mock.Call
}

// Order is a helper method to define mock.On call
func (_e *Storager_Expecter) Order() *Storager_Order_Call {
	return &Storager_Order_Call{Call: _e.mock.On("Order")}
}

func (_c *Storager_Order_Call) Run(run func()) *Storager_Order_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storager_Order_Call) Return(_a0 storage.Orderer) *Storager_Order_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_Order_Call) RunAndReturn(run func() storage.Orderer) *Storager_Order_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *Storager) User() storage.Userer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 storage.Userer
	if rf, ok := ret.Get(0).(func() storage.Userer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Userer)
		}
	}

	return r0
}

// Storager_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type Storager_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *Storager_Expecter) User() *Storager_User_Call {
	return &Storager_User_Call{Call: _e.mock.On("User")}
}

func (_c *Storager_User_Call) Run(run func()) *Storager_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storager_User_Call) Return(_a0 storage.Userer) *Storager_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storager_User_Call) RunAndReturn(run func() storage.Userer) *Storager_User_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorager creates a new instance of Storager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storager {
	mock := &Storager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
