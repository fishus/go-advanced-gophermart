// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fishus/go-advanced-gophermart/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// Userer is an autogenerated mock type for the Userer type
type Userer struct {
	mock.Mock
}

type Userer_Expecter struct {
	mock *mock.Mock
}

func (_m *Userer) EXPECT() *Userer_Expecter {
	return &Userer_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Userer) Add(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Userer_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Userer_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *Userer_Expecter) Add(_a0 interface{}, _a1 interface{}) *Userer_Add_Call {
	return &Userer_Add_Call{Call: _e.mock.On("Add", _a0, _a1)}
}

func (_c *Userer_Add_Call) Run(run func(_a0 context.Context, _a1 models.User)) *Userer_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Userer_Add_Call) Return(_a0 models.UserID, _a1 error) *Userer_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Userer_Add_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *Userer_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *Userer) GetByID(_a0 context.Context, _a1 models.UserID) (models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Userer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Userer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.UserID
func (_e *Userer_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *Userer_GetByID_Call {
	return &Userer_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *Userer_GetByID_Call) Run(run func(_a0 context.Context, _a1 models.UserID)) *Userer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID))
	})
	return _c
}

func (_c *Userer_GetByID_Call) Return(_a0 models.User, _a1 error) *Userer_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Userer_GetByID_Call) RunAndReturn(run func(context.Context, models.UserID) (models.User, error)) *Userer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *Userer) Login(_a0 context.Context, _a1 models.User) (models.UserID, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 models.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.UserID, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.UserID); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.UserID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Userer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Userer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *Userer_Expecter) Login(_a0 interface{}, _a1 interface{}) *Userer_Login_Call {
	return &Userer_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *Userer_Login_Call) Run(run func(_a0 context.Context, _a1 models.User)) *Userer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Userer_Login_Call) Return(_a0 models.UserID, _a1 error) *Userer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Userer_Login_Call) RunAndReturn(run func(context.Context, models.User) (models.UserID, error)) *Userer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserer creates a new instance of Userer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Userer {
	mock := &Userer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
