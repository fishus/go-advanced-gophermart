// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

type Order_Expecter struct {
	mock *mock.Mock
}

func (_m *Order) EXPECT() *Order_Expecter {
	return &Order_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Order) Add(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Order_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Order_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Order_Expecter) Add(_a0 interface{}, _a1 interface{}) *Order_Add_Call {
	return &Order_Add_Call{Call: _e.mock.On("Add", _a0, _a1)}
}

func (_c *Order_Add_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Order_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Order_Add_Call) Return() *Order_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *Order_Add_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Order_Add_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *Order) List(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Order_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Order_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Order_Expecter) List(_a0 interface{}, _a1 interface{}) *Order_List_Call {
	return &Order_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *Order_List_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Order_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Order_List_Call) Return() *Order_List_Call {
	_c.Call.Return()
	return _c
}

func (_c *Order_List_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Order_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
