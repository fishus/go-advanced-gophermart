// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Loyalty is an autogenerated mock type for the Loyalty type
type Loyalty struct {
	mock.Mock
}

type Loyalty_Expecter struct {
	mock *mock.Mock
}

func (_m *Loyalty) EXPECT() *Loyalty_Expecter {
	return &Loyalty_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: _a0, _a1
func (_m *Loyalty) Balance(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Loyalty_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type Loyalty_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Loyalty_Expecter) Balance(_a0 interface{}, _a1 interface{}) *Loyalty_Balance_Call {
	return &Loyalty_Balance_Call{Call: _e.mock.On("Balance", _a0, _a1)}
}

func (_c *Loyalty_Balance_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Loyalty_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Loyalty_Balance_Call) Return() *Loyalty_Balance_Call {
	_c.Call.Return()
	return _c
}

func (_c *Loyalty_Balance_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Loyalty_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: _a0, _a1
func (_m *Loyalty) Withdraw(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Loyalty_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type Loyalty_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Loyalty_Expecter) Withdraw(_a0 interface{}, _a1 interface{}) *Loyalty_Withdraw_Call {
	return &Loyalty_Withdraw_Call{Call: _e.mock.On("Withdraw", _a0, _a1)}
}

func (_c *Loyalty_Withdraw_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Loyalty_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Loyalty_Withdraw_Call) Return() *Loyalty_Withdraw_Call {
	_c.Call.Return()
	return _c
}

func (_c *Loyalty_Withdraw_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Loyalty_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// Withdrawals provides a mock function with given fields: _a0, _a1
func (_m *Loyalty) Withdrawals(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// Loyalty_Withdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdrawals'
type Loyalty_Withdrawals_Call struct {
	*mock.Call
}

// Withdrawals is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *Loyalty_Expecter) Withdrawals(_a0 interface{}, _a1 interface{}) *Loyalty_Withdrawals_Call {
	return &Loyalty_Withdrawals_Call{Call: _e.mock.On("Withdrawals", _a0, _a1)}
}

func (_c *Loyalty_Withdrawals_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *Loyalty_Withdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *Loyalty_Withdrawals_Call) Return() *Loyalty_Withdrawals_Call {
	_c.Call.Return()
	return _c
}

func (_c *Loyalty_Withdrawals_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *Loyalty_Withdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoyalty creates a new instance of Loyalty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoyalty(t interface {
	mock.TestingT
	Cleanup(func())
}) *Loyalty {
	mock := &Loyalty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
